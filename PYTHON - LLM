import nltk
from nltk import bigrams, FreqDist
from nltk.corpus import reuters
from nltk.probability import LidstoneProbDist

nltk.download('reuters')

# Load the Reuters corpus
corpus = reuters.sents()

# Flatten the list of sentences into a list of words
words = [word.lower() for sentence in corpus for word in sentence]

# Create bigrams from the list of words
bi_grams = list(bigrams(words))

# Calculate the frequency distribution of bigrams
bi_gram_freq = FreqDist(bi_grams)

# Create a conditional frequency distribution
cond_freq_dist = nltk.ConditionalFreqDist(bi_grams)

# Create a Lidstone probability distribution with a pseudocount of 0.1
lpd = LidstoneProbDist(cond_freq_dist, 0.1)

# Function to generate text using the local language model
def generate_text(seed_word, length=10):
    current_word = seed_word.lower()
    text = [current_word]

    for _ in range(length - 1):
        next_word = lpd.generate([current_word])
        text.append(next_word)
        current_word = next_word

    return ' '.join(text)

# Generate text starting with a seed word
generated_text = generate_text('spirituality', length=15)
print(generated_text)
